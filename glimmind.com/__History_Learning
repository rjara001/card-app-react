Kicking off	Dando inicio	0	1	1
Goes out	Sale	0	1	1
To address those	Abordarlos	0	1	1
Remaining ones	Los restantes	0	1	1
Assigned to me	Asignado a mi	0	1	1
Familiarize	Familiarizar	0	1	1
Cheat sheet	Torpedo/hoja de trucos	0	1	1
Attest	Dar fe	0	1	1
Reach out at	Contactar	0	1	1
Thanks in advance	Gracias por adelantado	0	1	1
To aim	Apuntar	0	1	1
Tackle this	Abordar	0	1	1
I keep	Sigo	0	1	1
Spell out	Especificar	0	1	1
Hesitate	Titubear	0	1	1
Heads up	Aviso	0	1	1
After a bit	Después de un rato	0	1	1
Come back	Volver	0	1	1
In the AM	En la mañana	0	1	1
Check	Revisar	0	1	1
Off hours	Horas libres	0	1	1
A Hack	Un truco 	0	1	1
Follow up	Seguimiento	0	1	1
Downstream	Aguas a bajo	0	1	1
Breaking change	Cambio rotundo	0	1	1
Oblige	Obligar	0	1	1
Took punches	Recibió golpes	0	1	1
Pinpoint people	Identificar gente 	0	1	1
Briefly	Brevemente	0	1	1
breathing room	Espacio de respiro	0	1	1
To reach out	Contactar a	0	1	1
To both	A los dos	0	1	1
Getting engaged	Comprometidos	0	1	1
Make sure	Asegurarse	0	1	1
Do need	Necesitar	0	1	1
our end	Por nuestra parte	0	1	1
But I do	Pero lo hago	0	1	1
Bring up	Traer un tema	0	1	1
Waste time	Perder el tiempo	0	1	1
Make time	Hacer un espacio de tiempo	0	1	1
I have time	Tengo tiempo	0	1	1
Day off	Día libre	0	1	1
In alignment	En alineamiento	0	1	1
Flourishes/thriving	Prospero	0	1	1
Delight	Deleite	0	1	1
Mishaps	Percances	0	1	1
To fine tune	Afinar	0	1	1
Craft	Oficio	0	1	1
Make decisions	Tomar decisiones	0	1	1
Ship stuff	Enviar cosas	0	1	1
Slow down	Relentizar	0	1	1
To Strive	Esforzar	0	1	1
Carved out	Forjado/labrado	0	1	1
Carved out	Forjado/labrado	0	1	1
You beat me to it	Me ganaste	0	1	1
Moving along	Moviéndose	0	1	1
Eager	Ancioso	0	1	1
Inception	Comienzo	0	1	1
Here we go	Aquí vamos	0	1	1
It takes a while	Se tarda un poco	0	1	1
The other one	El otro	0	1	1
Which is not ideal	Lo que no es ideal	0	1	1
I wish there was a better way	Desearía que hubiera una mejor forma	0	1	1
Look for	Buscar	0	1	1
Sometime this week	En algún momento de esta semana	0	1	1
Hit live	Salir en vivo	0	1	1
More than once	Más de una vez	0	1	1
Lend assistence	Prestar ayuda	0	1	1
Im not sure what that story is	No estoy seguro de que historia es esa	0	1	1
The more	Cuanto mas	0	1	1
Figuring that	Descifrar eso	0	1	1
Pull	Extraer	0	1	1
Rolled over	Se volco/rodó sobre	0	1	1
The intention is that	La intención es	0	1	1
I dont have a problem	No tengo ningún problema 	0	1	1
Gets counted	Sea considerado	0	1	1
Head to 	Diríjase a	0	1	1
Come out	Salgan	0	1	1
Dubbed	Apodado	0	1	1
Work this out	Resolver esto	0	1	1
Wrapped up	Cubriendo	0	1	1
I don't think so	No lo creo	0	1	1
it's meant	Ha significado	0	1	1
Where were you born	Donde naciste	0	1	1
Step out	Salir	0	1	1
As per	Segun/de acuerdo con	0	1	1
Adhere to	Adherirse a	0	1	1
Heard rumor	Escuche el rumor	0	1	1
For those of you	Para aquellos de ustedes	0	1	1
Reinvent the wheel	Reinventar la rueda	0	1	1
Going back to	Volviendo a	0	1	1
Gloss over	Pasar por alto	0	1	1
Gloss over	Pasar por alto	0	1	1
Largely	En gran parte	0	1	1
Aside	Aparte	0	1	1
Most of	La mayoría de	0	1	1
Mainly	Principalmente	0	1	1
Tricky	Complicado	0	1	1
Be placed	Son puestos/colocarse	0	1	1
Fall under	Cae bajo	0	1	1
Handy	Práctico	0	1	1
Gonna try	Lo intentaré	0	1	1
Out of sync	Desincronizados	0	1	1
Earning and redeeming	Ganar y canjear	0	1	1
We'd want to	Quisiéramos	0	1	1
Unsung	Anonimo	0	1	1
Sit tight	Quédense tranquilos	0	1	1
Outlines	Describe	0	1	1
Treat 	Tratar	0	1	1
Ramped up	Incrementado	0	1	1
Merchant	Comercio	0	1	1
Comprised/composed/consisted	Compuesto	0	1	1
Installments	Cuotas	0	1	1
Easing us away	Aliviandonos	0	1	1
Supersede	Reemplazar	0	1	1
To Pick	Elijir/recoger	0	1	1
Deal with	Tratar con/abordar	0	1	1
Wind up	Terminar (como resultado de algo) 	0	1	1
Nail down	Dar al clavo	0	1	1
Get on	Seguir adelante	0	1	1
I would better	Sería mejor	0	1	1
Squashing	Aplastando	0	1	1
I did not know	No sabia	0	1	1
Pull data	Extraer la data	0	1	1
Handoffs notes	Notas de traspaso	0	1	1
 Along the way	Sobre la marcha	0	1	1
Safe–guard against	Salvaguardar contra	0	1	1
Triage	Clasificar	0	1	1
I wish I had	Ojalá tuviera 	0	1	1
Maybe a fluke	Tal vez una casualidad 	0	1	1
Till	Hasta	0	1	1
You'd have	Tendrias	0	1	1
Get it up	Levantalo	0	1	1
Staring	Mirando	0	1	1
I had 	Tuve	0	1	1
Even thougth	Aun cuando/aunque	0	1	1
You'd have (you would have) 	Tendrias	0	1	1
I will be able	Yo podre	0	1	1
From then	Desde entonces	0	1	1
Lay off	Despedido/suspendido	0	1	1
Im going to try to	Voy a intentar	0	1	1
Ahh true ok, good call out	Ahh cierto, buena mencion	0	1	1
My bad	Mi error	0	1	1
as soon as	tan pronto como	0	1	1
do not listen to him	no lo escuches	0	1	1
He did not say	El no dijo	0	1	1
I did have/had	Tenía	0	1	1
Is ready for a long time	Esta listo hace un rato	0	1	1
I feel like I've had some kind of progress	Siento que he tenido algún tipo de progreso	0	1	1
Fortunately	Afortunadamente	0	1	1
Drop the status	Deja el estado	0	1	1
With regard to	A propósito de	0	1	1
Overcome	Vencer	0	1	1
Passed away	Falleció	0	1	1
Tidy	Ordenar	0	1	1
A little longer	Un poco mas	0	1	1
Recall	Recordar	0	1	1
Readiness	Preparación	0	1	1
Complaint	Queja	0	1	1
In advance	Por adelantado	0	1	1
On hold	En espera	0	1	0
Circle back	Volver	0	1	1
To lean	Apoyarse	0	1	1
Pay due regard to	Poner la debida atención	0	1	1
Closely linked	Estrechamente relacionado 	0	1	1
Closely linked	Estrechamente relacionado 	0	1	1
Treating Customers Fairly	Trato justo a los clientes	0	1	1
Keep me in the loop	Mantenme al tanto	0	1	1
On the same page	En la misma sintonia	0	1	1
Drill down into	Profundizar en	0	1	1
Cut to the chase	Ir al grano	0	1	1
I was under the impression	Tenía la impresión	0	1	1
You as well	Tu también	0	1	1
Great gig	Buen trabajo	0	1	1
Issue is now resolved	El problema ahora esta resuelto	0	1	1
It is widely used	Es muy utilizado	0	1	1
second to none/unbeatable	Insuperable	0	1	1
My patience ran out	Mi paciencia se agotó	0	1	1
Backward compatible	Compatibilidad hacia atras	0	1	1
needless to say	No hace falta decir/por supuesto	0	1	1
Top up	Recarga	0	1	1
I don't wanna bug him	No quiero molestarlo a el	0	1	1
He was late 	Llego tarde	0	1	1
Hope they can fix it soon	Espero puedan solucionarlo pronto 	0	1	1
Put this puzzle together	Armar este rompecabeza	0	1	1
Bear with me	Ten paciencia conmigo	0	1	1
For now	Por lo pronto	0	1	1
When do you want me to do it?	Cuando quieres que lo haga? 	0	1	1
you were going to	Ibas a	0	1	1
It is convenient that	Es conveniente que	0	1	1
move forward	Avanzar hacia delante 	0	1	1
If you get stuck	Si te atascas	0	1	1
Is it due today? 	Es para hoy? 	0	1	1
It's due today	Es para hoy	0	1	1
The environment I was given	El ambiente que me dieron	0	1	1
Running an errand	Haciendo un tramite	0	1	1
They are very willing to help	Están muy dispuestos a ayudar	0	1	1
Top of my head	Sobre mi cabeza	0	1	1
What was it? 	Que era? 	0	1	1
I will make up time	Recuperaré el tiempo	0	1	1
The findings	Los hallazgos	0	1	1
Gimme a heads up	Avisame	0	1	1
Is all about	Se trata	0	1	1
Be Rigth back	Vuelvo enseguida	0	1	1
Are we all on the same page? 	Estamos todos de acuerdo? 	0	1	1
Knowledge dump	Volcado de conocimiento	0	1	1
It to fall short	Se queda corto	0	1	1
Come across as	Dar la impresión	0	1	1
Let's suppose	Supongamos que	0	1	1
What would happen if	Que pasaría si	0	1	1
Needless to say	No hace falta decir	0	1	1
You Should have followed	Deberías haber seguido	0	1	1
There will be not	No habrá	0	1	1
It has to be	Esto tiene que ser	0	1	1
Drop out	Abandonar	0	1	1
May i know whether	Podría saber si 	0	1	1
Get over	Superar	0	1	1
How do you get over the certificate issues? 	Como superas los errores de los certificados? 	0	1	1
Just gotta get over this Sang cough	Solo tengo que superar esta maldita tos	0	1	1
Get over her, will you? 	Superala, quieres? 	0	1	1
We are in a position to	Estamos en condiciones de	0	1	1